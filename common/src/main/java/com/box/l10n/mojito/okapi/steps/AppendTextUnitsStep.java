package com.box.l10n.mojito.okapi.steps;

import java.util.LinkedList;
import java.util.Queue;
import net.sf.okapi.common.Event;
import net.sf.okapi.common.EventType;
import net.sf.okapi.common.annotation.Note;
import net.sf.okapi.common.annotation.NoteAnnotation;
import net.sf.okapi.common.pipeline.BasePipelineStep;
import net.sf.okapi.common.resource.Property;
import net.sf.okapi.common.resource.TextUnit;
import net.sf.okapi.common.skeleton.GenericSkeleton;
import net.sf.okapi.common.skeleton.GenericSkeletonPart;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Configurable;

/**
 * Append text units from external source.
 *
 * @author mattwilshire
 */
@Configurable
public class AppendTextUnitsStep extends BasePipelineStep {

  static Logger logger = LoggerFactory.getLogger(AppendTextUnitsStep.class);

  private final Queue<Event> additionalEvents = new LinkedList<>();
  private boolean endDocumentProcessed = false;
  private Event endDocumentEvent = null;

  @Override
  public String getName() {
    return "AppendTextUnitsStep";
  }

  @Override
  public String getDescription() {
    return "Append text units";
  }

  @Override
  public Event handleEvent(Event event) {
    if (endDocumentProcessed) {
      if (!additionalEvents.isEmpty()) {
        Event fakeEvent = additionalEvents.poll();
        System.out.println(fakeEvent.getEventType().toString());
        return fakeEvent;
      }
      return endDocumentEvent;
    }

    if (event.getEventType() == EventType.END_DOCUMENT && !endDocumentProcessed) {
      endDocumentProcessed = true;

      String source = "Test string!";

      TextUnit tu = new TextUnit("3", source);
      tu.setName(source + " --- " + "error.message.hello");
      tu.setProperty(new Property("context", "error.message.hello"));

      NoteAnnotation noteAnnotation = new NoteAnnotation();
      noteAnnotation.add(new Note("L10N: This is a note."));
      tu.setAnnotation(noteAnnotation);

      /* Skeleton generated by okapi, create one for our TU */
      GenericSkeleton genericSkeleton = new GenericSkeleton();
      genericSkeleton.add(
          new GenericSkeletonPart("\nmsgid \"" + tu.getSource().toString() + "\"\n" + "msgstr \""));

      GenericSkeletonPart part = new GenericSkeletonPart("[#$$self$]");
      part.setParent(tu);
      part.setLocale(this.getTargetLocale());

      genericSkeleton.add(part);
      genericSkeleton.add(new GenericSkeletonPart("\"\n"));
      tu.setSkeleton(genericSkeleton);

      tu.setMimeType("application/x-gettext");
      tu.setIsTranslatable(true);
      tu.setPreserveWhitespaces(true);
      additionalEvents.add(new Event(EventType.TEXT_UNIT, tu));

      endDocumentEvent = event;
      return new Event(EventType.NO_OP);
    }
    return event;
  }

  @Override
  public boolean isDone() {
    return endDocumentProcessed && additionalEvents.isEmpty();
  }
}
